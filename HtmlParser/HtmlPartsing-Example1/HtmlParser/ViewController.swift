//
//  ViewController.swift
//  HtmlParser
//
//  Created by SOWJI on 16/11/20.
//

import UIKit

class ViewController: UIViewController {

    @IBOutlet weak var htmlLabel: UILabel!
    var htmlString = #"""
<div class="section" id="basic-operators"> <h1>Basic Operators<a class="headerlink" href="#basic-operators" title="Permalink to this headline">¶</a></h1> <p>An <em>operator</em> is a special symbol or phrase that you use to check, change, or combine values. For example, the addition operator (<code class="docutils literal notranslate"><span class="pre">+</span></code>) adds two numbers, as in <code class="docutils literal notranslate"><span class="pre">let</span> <span class="pre">i</span> <span class="pre">=</span> <span class="pre">1</span> <span class="pre">+</span> <span class="pre">2</span></code>, and the logical AND operator (<code class="docutils literal notranslate"><span class="pre">&amp;&amp;</span></code>) combines two Boolean values, as in <code class="docutils literal notranslate"><span class="pre">if</span> <span class="pre">enteredDoorCode</span> <span class="pre">&amp;&amp;</span> <span class="pre">passedRetinaScan</span></code>.</p> <p>Swift supports the operators you may already know from languages like C, and improves several capabilities to eliminate common coding errors. The assignment operator (<code class="docutils literal notranslate"><span class="pre">=</span></code>) doesn’t return a value, to prevent it from being mistakenly used when the equal to operator (<code class="docutils literal notranslate"><span class="pre">==</span></code>) is intended. Arithmetic operators (<code class="docutils literal notranslate"><span class="pre">+</span></code>, <code class="docutils literal notranslate"><span class="pre">-</span></code>, <code class="docutils literal notranslate"><span class="pre">*</span></code>, <code class="docutils literal notranslate"><span class="pre">/</span></code>, <code class="docutils literal notranslate"><span class="pre">%</span></code> and so forth) detect and disallow value overflow, to avoid unexpected results when working with numbers that become larger or smaller than the allowed value range of the type that stores them. You can opt in to value overflow behavior by using Swift’s overflow operators, as described in <a class="reference internal" href="AdvancedOperators.html#ID37"><span class="std std-ref">Overflow Operators</span></a>.</p> <p>Swift also provides range operators that aren’t found in C, such as <code class="docutils literal notranslate"><span class="pre">a..&lt;b</span></code> and <code class="docutils literal notranslate"><span class="pre">a...b</span></code>, as a shortcut for expressing a range of values.</p> <p>This chapter describes the common operators in Swift. <a class="reference internal" href="AdvancedOperators.html"><span class="doc">Advanced Operators</span></a> covers Swift’s advanced operators, and describes how to define your own custom operators and implement the standard operators for your own custom types.</p> <div class="section" id="ID61"> <h2>Terminology<a class="headerlink" href="#ID61" title="Permalink to this headline">¶</a></h2> <p>Operators are unary, binary, or ternary:</p> <ul class="simple"> <li><em>Unary</em> operators operate on a single target (such as <code class="docutils literal notranslate"><span class="pre">-a</span></code>). Unary <em>prefix</em> operators appear immediately before their target (such as <code class="docutils literal notranslate"><span class="pre">!b</span></code>), and unary <em>postfix</em> operators appear immediately after their target (such as <code class="docutils literal notranslate"><span class="pre">c!</span></code>).</li> <li><em>Binary</em> operators operate on two targets (such as <code class="docutils literal notranslate"><span class="pre">2</span> <span class="pre">+</span> <span class="pre">3</span></code>) and are <em>infix</em> because they appear in between their two targets.</li> <li><em>Ternary</em> operators operate on three targets. Like C, Swift has only one ternary operator, the ternary conditional operator (<code class="docutils literal notranslate"><span class="pre">a</span> <span class="pre">?</span> <span class="pre">b</span> <span class="pre">:</span> <span class="pre">c</span></code>).</li> </ul> <p>The values that operators affect are <em>operands</em>. In the expression <code class="docutils literal notranslate"><span class="pre">1</span> <span class="pre">+</span> <span class="pre">2</span></code>, the <code class="docutils literal notranslate"><span class="pre">+</span></code> symbol is a binary operator and its two operands are the values <code class="docutils literal notranslate"><span class="pre">1</span></code> and <code class="docutils literal notranslate"><span class="pre">2</span></code>.</p> </div> <div class="section" id="ID62"> <h2>Assignment Operator<a class="headerlink" href="#ID62" title="Permalink to this headline">¶</a></h2> <p>The <em>assignment operator</em> (<code class="docutils literal notranslate"><span class="pre">a</span> <span class="pre">=</span> <span class="pre">b</span></code>) initializes or updates the value of <code class="docutils literal notranslate"><span class="pre">a</span></code> with the value of <code class="docutils literal notranslate"><span class="pre">b</span></code>:</p> <div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">let</span> <span class="nv">b</span> = <span class="m">10</span> </li><li><span class="k">var</span> <span class="nv">a</span> = <span class="m">5</span> </li><li><span class="nv">a</span> = <span class="nv">b</span> </li><li><span class="c">// a is now equal to 10</span> </li></ol></div></div></div> <p>If the right side of the assignment is a tuple with multiple values, its elements can be decomposed into multiple constants or variables at once:</p> <div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">let</span> (<span class="nv">x</span>, <span class="nv">y</span>) = (<span class="m">1</span>, <span class="m">2</span>) </li><li><span class="c">// x is equal to 1, and y is equal to 2</span> </li></ol></div></div></div> <p>Unlike the assignment operator in C and Objective-C, the assignment operator in Swift does not itself return a value. The following statement is not valid:</p> <div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">if</span> <span class="nv">x</span> = <span class="nv">y</span> { </li><li>    <span class="c">// This is not valid, because x = y does not return a value.</span> </li><li>} </li></ol></div></div></div> <p>This feature prevents the assignment operator (<code class="docutils literal notranslate"><span class="pre">=</span></code>) from being used by accident when the equal to operator (<code class="docutils literal notranslate"><span class="pre">==</span></code>) is actually intended. By making <code class="docutils literal notranslate"><span class="pre">if</span> <span class="pre">x</span> <span class="pre">=</span> <span class="pre">y</span></code> invalid, Swift helps you to avoid these kinds of errors in your code.</p> </div> <div class="section" id="ID63"> <h2>Arithmetic Operators<a class="headerlink" href="#ID63" title="Permalink to this headline">¶</a></h2> <p>Swift supports the four standard <em>arithmetic operators</em> for all number types:</p> <ul class="simple"> <li>Addition (<code class="docutils literal notranslate"><span class="pre">+</span></code>)</li> <li>Subtraction (<code class="docutils literal notranslate"><span class="pre">-</span></code>)</li> <li>Multiplication (<code class="docutils literal notranslate"><span class="pre">*</span></code>)</li> <li>Division (<code class="docutils literal notranslate"><span class="pre">/</span></code>)</li> </ul> <div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="m">1</span> + <span class="m">2</span>       <span class="c">// equals 3</span> </li><li><span class="m">5</span> - <span class="m">3</span>       <span class="c">// equals 2</span> </li><li><span class="m">2</span> * <span class="m">3</span>       <span class="c">// equals 6</span> </li><li><span class="m">10.0</span> / <span class="m">2.5</span>  <span class="c">// equals 4.0</span> </li></ol></div></div></div> <p>Unlike the arithmetic operators in C and Objective-C, the Swift arithmetic operators don’t allow values to overflow by default. You can opt in to value overflow behavior by using Swift’s overflow operators (such as <code class="docutils literal notranslate"><span class="pre">a</span> <span class="pre">&amp;+</span> <span class="pre">b</span></code>). See <a class="reference internal" href="AdvancedOperators.html#ID37"><span class="std std-ref">Overflow Operators</span></a>.</p> <p>The addition operator is also supported for <code class="docutils literal notranslate"><span class="pre">String</span></code> concatenation:</p> <div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="s">&quot;hello, &quot;</span> + <span class="s">&quot;world&quot;</span>  <span class="c">// equals &quot;hello, world&quot;</span> </li></ol></div></div></div> <div class="section" id="ID64"> <h3>Remainder Operator<a class="headerlink" href="#ID64" title="Permalink to this headline">¶</a></h3> <p>The <em>remainder operator</em> (<code class="docutils literal notranslate"><span class="pre">a</span> <span class="pre">%</span> <span class="pre">b</span></code>) works out how many multiples of <code class="docutils literal notranslate"><span class="pre">b</span></code> will fit inside <code class="docutils literal notranslate"><span class="pre">a</span></code> and returns the value that is left over (known as the <em>remainder</em>).</p> <div class="admonition note"> <p class="first admonition-title">Note</p> <p class="last">The remainder operator (<code class="docutils literal notranslate"><span class="pre">%</span></code>) is also known as a <em>modulo operator</em> in other languages. However, its behavior in Swift for negative numbers means that, strictly speaking, it’s a remainder rather than a modulo operation.</p> </div> <p>Here’s how the remainder operator works. To calculate <code class="docutils literal notranslate"><span class="pre">9</span> <span class="pre">%</span> <span class="pre">4</span></code>, you first work out how many <code class="docutils literal notranslate"><span class="pre">4</span></code>s will fit inside <code class="docutils literal notranslate"><span class="pre">9</span></code>:</p> <img alt="../_images/remainderInteger_2x.png" class="align-center" src="../_images/remainderInteger_2x.png" style="width: 337px;" /> <p>You can fit two <code class="docutils literal notranslate"><span class="pre">4</span></code>s inside <code class="docutils literal notranslate"><span class="pre">9</span></code>, and the remainder is <code class="docutils literal notranslate"><span class="pre">1</span></code> (shown in orange).</p> <p>In Swift, this would be written as:</p> <div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="m">9</span> % <span class="m">4</span>    <span class="c">// equals 1</span> </li></ol></div></div></div> <p>To determine the answer for <code class="docutils literal notranslate"><span class="pre">a</span> <span class="pre">%</span> <span class="pre">b</span></code>, the <code class="docutils literal notranslate"><span class="pre">%</span></code> operator calculates the following equation and returns <code class="docutils literal notranslate"><span class="pre">remainder</span></code> as its output:</p> <p><code class="docutils literal notranslate"><span class="pre">a</span></code> = (<code class="docutils literal notranslate"><span class="pre">b</span></code> x <code class="docutils literal notranslate"><span class="pre">some</span> <span class="pre">multiplier</span></code>) + <code class="docutils literal notranslate"><span class="pre">remainder</span></code></p> <p>where <code class="docutils literal notranslate"><span class="pre">some</span> <span class="pre">multiplier</span></code> is the largest number of multiples of <code class="docutils literal notranslate"><span class="pre">b</span></code> that will fit inside <code class="docutils literal notranslate"><span class="pre">a</span></code>.</p> <p>Inserting <code class="docutils literal notranslate"><span class="pre">9</span></code> and <code class="docutils literal notranslate"><span class="pre">4</span></code> into this equation yields:</p> <p><code class="docutils literal notranslate"><span class="pre">9</span></code> = (<code class="docutils literal notranslate"><span class="pre">4</span></code> x <code class="docutils literal notranslate"><span class="pre">2</span></code>) + <code class="docutils literal notranslate"><span class="pre">1</span></code></p> <p>The same method is applied when calculating the remainder for a negative value of <code class="docutils literal notranslate"><span class="pre">a</span></code>:</p> <div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="m">-9</span> % <span class="m">4</span>   <span class="c">// equals -1</span> </li></ol></div></div></div> <p>Inserting <code class="docutils literal notranslate"><span class="pre">-9</span></code> and <code class="docutils literal notranslate"><span class="pre">4</span></code> into the equation yields:</p> <p><code class="docutils literal notranslate"><span class="pre">-9</span></code> = (<code class="docutils literal notranslate"><span class="pre">4</span></code> x <code class="docutils literal notranslate"><span class="pre">-2</span></code>) + <code class="docutils literal notranslate"><span class="pre">-1</span></code></p> <p>giving a remainder value of <code class="docutils literal notranslate"><span class="pre">-1</span></code>.</p> <p>The sign of <code class="docutils literal notranslate"><span class="pre">b</span></code> is ignored for negative values of <code class="docutils literal notranslate"><span class="pre">b</span></code>. This means that <code class="docutils literal notranslate"><span class="pre">a</span> <span class="pre">%</span> <span class="pre">b</span></code> and <code class="docutils literal notranslate"><span class="pre">a</span> <span class="pre">%</span> <span class="pre">-b</span></code> always give the same answer.</p> </div> <div class="section" id="ID67"> <h3>Unary Minus Operator<a class="headerlink" href="#ID67" title="Permalink to this headline">¶</a></h3> <p>The sign of a numeric value can be toggled using a prefixed <code class="docutils literal notranslate"><span class="pre">-</span></code>, known as the <em>unary minus operator</em>:</p> <div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">let</span> <span class="nv">three</span> = <span class="m">3</span> </li><li><span class="k">let</span> <span class="nv">minusThree</span> = -<span class="nv">three</span>       <span class="c">// minusThree equals -3</span> </li><li><span class="k">let</span> <span class="nv">plusThree</span> = -<span class="nv">minusThree</span>   <span class="c">// plusThree equals 3, or &quot;minus minus three&quot;</span> </li></ol></div></div></div> <p>The unary minus operator (<code class="docutils literal notranslate"><span class="pre">-</span></code>) is prepended directly before the value it operates on, without any white space.</p> </div> <div class="section" id="ID68"> <h3>Unary Plus Operator<a class="headerlink" href="#ID68" title="Permalink to this headline">¶</a></h3> <p>The <em>unary plus operator</em> (<code class="docutils literal notranslate"><span class="pre">+</span></code>) simply returns the value it operates on, without any change:</p> <div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">let</span> <span class="nv">minusSix</span> = <span class="m">-6</span> </li><li><span class="k">let</span> <span class="nv">alsoMinusSix</span> = +<span class="nv">minusSix</span>  <span class="c">// alsoMinusSix equals -6</span> </li></ol></div></div></div> <p>Although the unary plus operator doesn’t actually do anything, you can use it to provide symmetry in your code for positive numbers when also using the unary minus operator for negative numbers.</p> </div> </div> <div class="section" id="ID69"> <h2>Compound Assignment Operators<a class="headerlink" href="#ID69" title="Permalink to this headline">¶</a></h2> <p>Like C, Swift provides <em>compound assignment operators</em> that combine assignment (<code class="docutils literal notranslate"><span class="pre">=</span></code>) with another operation. One example is the <em>addition assignment operator</em> (<code class="docutils literal notranslate"><span class="pre">+=</span></code>):</p> <div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">var</span> <span class="nv">a</span> = <span class="m">1</span> </li><li><span class="nv">a</span> += <span class="m">2</span> </li><li><span class="c">// a is now equal to 3</span> </li></ol></div></div></div> <p>The expression <code class="docutils literal notranslate"><span class="pre">a</span> <span class="pre">+=</span> <span class="pre">2</span></code> is shorthand for <code class="docutils literal notranslate"><span class="pre">a</span> <span class="pre">=</span> <span class="pre">a</span> <span class="pre">+</span> <span class="pre">2</span></code>. Effectively, the addition and the assignment are combined into one operator that performs both tasks at the same time.</p> <div class="admonition note"> <p class="first admonition-title">Note</p> <p class="last">The compound assignment operators don’t return a value. For example, you can’t write <code class="docutils literal notranslate"><span class="pre">let</span> <span class="pre">b</span> <span class="pre">=</span> <span class="pre">a</span> <span class="pre">+=</span> <span class="pre">2</span></code>.</p> </div> <p>For information about the operators provided by the Swift standard library, see <a class="reference external" href="https://developer.apple.com/documentation/swift/operator_declarations">Operator Declarations</a>.</p> </div> <div class="section" id="ID70"> <h2>Comparison Operators<a class="headerlink" href="#ID70" title="Permalink to this headline">¶</a></h2> <p>Swift supports the following comparison operators:</p> <ul class="simple"> <li>Equal to (<code class="docutils literal notranslate"><span class="pre">a</span> <span class="pre">==</span> <span class="pre">b</span></code>)</li> <li>Not equal to (<code class="docutils literal notranslate"><span class="pre">a</span> <span class="pre">!=</span> <span class="pre">b</span></code>)</li> <li>Greater than (<code class="docutils literal notranslate"><span class="pre">a</span> <span class="pre">&gt;</span> <span class="pre">b</span></code>)</li> <li>Less than (<code class="docutils literal notranslate"><span class="pre">a</span> <span class="pre">&lt;</span> <span class="pre">b</span></code>)</li> <li>Greater than or equal to (<code class="docutils literal notranslate"><span class="pre">a</span> <span class="pre">&gt;=</span> <span class="pre">b</span></code>)</li> <li>Less than or equal to (<code class="docutils literal notranslate"><span class="pre">a</span> <span class="pre">&lt;=</span> <span class="pre">b</span></code>)</li> </ul> <div class="admonition note"> <p class="first admonition-title">Note</p> <p class="last">Swift also provides two <em>identity operators</em> (<code class="docutils literal notranslate"><span class="pre">===</span></code> and <code class="docutils literal notranslate"><span class="pre">!==</span></code>), which you use to test whether two object references both refer to the same object instance. For more information, see <a class="reference internal" href="ClassesAndStructures.html#ID90"><span class="std std-ref">Identity Operators</span></a>.</p> </div> <p>Each of the comparison operators returns a <code class="docutils literal notranslate"><span class="pre">Bool</span></code> value to indicate whether or not the statement is true:</p> <div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="m">1</span> == <span class="m">1</span>   <span class="c">// true because 1 is equal to 1</span> </li><li><span class="m">2</span> != <span class="m">1</span>   <span class="c">// true because 2 is not equal to 1</span> </li><li><span class="m">2</span> &gt; <span class="m">1</span>    <span class="c">// true because 2 is greater than 1</span> </li><li><span class="m">1</span> &lt; <span class="m">2</span>    <span class="c">// true because 1 is less than 2</span> </li><li><span class="m">1</span> &gt;= <span class="m">1</span>   <span class="c">// true because 1 is greater than or equal to 1</span> </li><li><span class="m">2</span> &lt;= <span class="m">1</span>   <span class="c">// false because 2 is not less than or equal to 1</span> </li></ol></div></div></div> <p>Comparison operators are often used in conditional statements, such as the <code class="docutils literal notranslate"><span class="pre">if</span></code> statement:</p> <div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li><span class="k">let</span> <span class="nv">name</span> = <span class="s">&quot;world&quot;</span> </li><li><span class="k">if</span> <span class="nv">name</span> == <span class="s">&quot;world&quot;</span> { </li><li>    <span class="nv">print</span>(<span class="s">&quot;hello, world&quot;</span>) </li><li>} <span class="k">else</span> { </li><li>    <span class="nv">print</span>(<span class="s">&quot;I&#39;m sorry </span>\<span class="p">(</span><span class="nv">name</span><span class="p">)</span><span class="s">, but I don&#39;t recognize you&quot;</span>) </li><li>} </li><li><span class="c">// Prints &quot;hello, world&quot;, because name is indeed equal to &quot;world&quot;.</span> </li></ol></div></div></div> <p>For more about the <code class="docutils literal notranslate"><span class="pre">if</span></code> statement, see <a class="reference internal" href="ControlFlow.html"><span class="doc">Control Flow</span></a>.</p> <p>You can compare two tuples if they have the same type and the same number of values. Tuples are compared from left to right, one value at a time, until the comparison finds two values that aren’t equal. Those two values are compared, and the result of that comparison determines the overall result of the tuple comparison. If all the elements are equal, then the tuples themselves are equal. For example:</p> <div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li>(<span class="m">1</span>, <span class="s">&quot;zebra&quot;</span>) &lt; (<span class="m">2</span>, <span class="s">&quot;apple&quot;</span>)   <span class="c">// true because 1 is less than 2; &quot;zebra&quot; and &quot;apple&quot; are not compared</span> </li><li>(<span class="m">3</span>, <span class="s">&quot;apple&quot;</span>) &lt; (<span class="m">3</span>, <span class="s">&quot;bird&quot;</span>)    <span class="c">// true because 3 is equal to 3, and &quot;apple&quot; is less than &quot;bird&quot;</span> </li><li>(<span class="m">4</span>, <span class="s">&quot;dog&quot;</span>) == (<span class="m">4</span>, <span class="s">&quot;dog&quot;</span>)      <span class="c">// true because 4 is equal to 4, and &quot;dog&quot; is equal to &quot;dog&quot;</span> </li></ol></div></div></div> <p>In the example above, you can see the left-to-right comparison behavior on the first line. Because <code class="docutils literal notranslate"><span class="pre">1</span></code> is less than <code class="docutils literal notranslate"><span class="pre">2</span></code>, <code class="docutils literal notranslate"><span class="pre">(1,</span> <span class="pre">&quot;zebra&quot;)</span></code> is considered less than <code class="docutils literal notranslate"><span class="pre">(2,</span> <span class="pre">&quot;apple&quot;)</span></code>, regardless of any other values in the tuples. It doesn’t matter that <code class="docutils literal notranslate"><span class="pre">&quot;zebra&quot;</span></code> isn’t less than <code class="docutils literal notranslate"><span class="pre">&quot;apple&quot;</span></code>, because the comparison is already determined by the tuples’ first elements. However, when the tuples’ first elements are the same, their second elements <em>are</em> compared—this is what happens on the second and third line.</p> <p>Tuples can be compared with a given operator only if the operator can be applied to each value in the respective tuples. For example, as demonstrated in the code below, you can compare two tuples of type <code class="docutils literal notranslate"><span class="pre">(String,</span> <span class="pre">Int)</span></code> because both <code class="docutils literal notranslate"><span class="pre">String</span></code> and <code class="docutils literal notranslate"><span class="pre">Int</span></code> values can be compared using the <code class="docutils literal notranslate"><span class="pre">&lt;</span></code> operator. In contrast, two tuples of type <code class="docutils literal notranslate"><span class="pre">(String,</span> <span class="pre">Bool)</span></code> can’t be compared with the <code class="docutils literal notranslate"><span class="pre">&lt;</span></code> operator because the <code class="docutils literal notranslate"><span class="pre">&lt;</span></code> operator can’t be applied to <code class="docutils literal notranslate"><span class="pre">Bool</span></code> values.</p> <div class="highlight-swift notranslate"><div class="code-sample"><div class="Swift highlight"><ol class="code-lines"><li>(<span class="s">&quot;blue&quot;</span>, <span class="m">-1</span>) &lt; (<span class="s">&quot;purple&quot;</span>, <span class="m">1</span>)        <span class="c">// OK, evaluates to true</span> </li><li>(<span class="s">&quot;blue&quot;</span>, <span class="k">false</span>) &lt; (<span class="s">&quot;purple&quot;</span>, <span class="k">true</span>)  <span class="c">// Error because &lt; can&#39;t compare Boolean values</span> </li></ol></div></div></div> <div class="admonition note"> <p class="first admonition-title">Note</p> <p class="last">The Swift standard library includes tuple comparison operators for tuples with fewer than seven elements. To compare tuples with seven or more elements, you must implement the comparison operators yourself.</p> </div>
"""#
    override func viewDidLoad() {
        super.viewDidLoad()
        if let attributedData = self.htmlString.htmlAttributedString {
            self.htmlLabel.attributedText = attributedData
        }
        // Do any additional setup after loading the view.
    }


}

extension String {
    var htmlAttributedString : NSAttributedString? {
        guard let data = self.data(using: .utf8) else { return nil }
        do {
            return try NSAttributedString(data: data, options: [.documentType : NSAttributedString.DocumentType.html,.characterEncoding : String.Encoding.utf8.rawValue], documentAttributes: nil)
        }
        catch{
           return nil
        }
    }
}
